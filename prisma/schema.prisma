generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String
  email            String    @unique
  avatar           String
  about            String
  password         String
  stripeCustomerId String?   @default("")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  recoveryKey      Int?
  posts            Post[]
  likes            Like[]
  comments         Comment[]

  notification Notification[]
  orders       Order[]
  cart         Cart[]
  followers    Follows[]      @relation("following")
  following    Follows[]      @relation("follower")

  sender        Conversation[] @relation("sender")
  receiver      Conversation[] @relation("receiver")
  messageSender Messages[]

  Product   Product[]
  fcmTokens FCMToken[]
}

model FCMToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id          Int          @id @default(autoincrement())
  image       String
  caption     String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  likes       Like[]
  comments    Comment[]
  sharedPost  SharedPost[]

  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  image       String
  price       Float
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderId     Int?
  order       Order?      @relation(fields: [orderId], references: [id])
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  cart        Cart[]
  OrderItem   OrderItem[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@unique([userId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Product   Product[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Follows {
  followerId  Int
  follower    User @relation("follower", fields: [followerId], references: [id])
  followingId Int
  following   User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id         Int          @id @default(autoincrement())
  senderId   Int
  receiverId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  messages   Messages[]
  sharedPost SharedPost[]

  sender   User @relation("sender", fields: [senderId], references: [id])
  receiver User @relation("receiver", fields: [receiverId], references: [id])
}

model Messages {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  message        String
  messageType    String? // 'text', 'image', 'video', 'audio'
  mediaUrl       String? // URL to the media file
  sharedPost     SharedPost[]
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  messageSender  User         @relation(fields: [senderId], references: [id])
}

model SharedPost {
  id             Int          @id @default(autoincrement())
  messageid      Int
  postId         Int
  conversationId Int
  message        Messages     @relation(fields: [messageid], references: [id])
  Post           Post?        @relation(fields: [postId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
